- The Node Express application will define some entry points.
- There are two major kinds of APIs : 
1. REST API ( Different URLs + HTTP Verbs (=endpoints) for different actions):
Uses a combination of URLs or paths and HTTP verbs such as GET, POST, PATCH, DELETE to build the end points 
which trigger different actions

The REST API approach uses this path HTTP method combination to identify resources or actions on a 
server and that's very intuitive and very easy to learn. Such an API is stateless and decoupled from any frontend, 
which means a REST API I build cannot just be used with my React single page application, any client could talk to it.

- Request path + http method (="endpoint") indetify a resource/action on the server
- API is stateless and decoupled from any frontend
- The most common type of API because of its easy of use

2. GraphQL API ( One URL + Http Verb (= one endpoint) that accepts query commands ):
Uses 1 URL and 1 HTTP verb, typically a POST request, so it will have one endpoint which then in turn however
accepts query commands. So since this HTTP verb is a POST request, when I build a GraphQL API, the body of 
the request contains a query expression that adheres to the GraphQL standard in the end, which describes 
the operation I want to perform.
GraphQL query : 
{
    query {
        user {
            name
            age
        }
    }
}
query => Operation type (other types are mutation, subscription)
user => Operation "endpoint"
name, age => requested fields

Now a GraphQL API does not use the path HTTP method, but instead such a query expression
using a certain query language to identify a resource in action and just like the REST API, it's also
stateless and decoupled. So just as with the REST API, I can attach any client to that API which is
great.

- Query expression identifies a resouce and action
- API is stateless and decoupled from any frontend
- Popular but less common, need to learn the query language